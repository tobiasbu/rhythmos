//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityEngine;
using UnityEditor;
using System;
using System.Xml;
using System.IO;

namespace RhythmosEditor
{
	internal class RhythmosEditor : EditorWindow {
		
		private RhythmosEditorRhythmListTab _rhythmTab;
		private RhythmosEditorNoteListTab _noteTab;
		//RhythmosEditorSettingsTab _settingsTab = new RhythmosEditorSettingsTab();
		TextAsset m_databaseFile;
		AudioClip m_metroAudioClip;
		
		int m_toolbarSelection = 0;
		string m_lastOpenDatabase;
		string m_message = "Please select a RhythmosDatabase file.";
		MessageType m_type = MessageType.None;

		private Texture2D g_icon;
		private Texture2D g_undoButton;
		private Texture2D g_redoButton;
		
		[MenuItem ("Tools/Rhythmos Editor")]
		public static void Launch() {

			GetWindow(typeof (RhythmosEditor)).Show();
			GetWindow(typeof (RhythmosEditor)).minSize = new Vector2(700,540);
			
		}
		
		RhythmosEditor() {
			
		}
		
		void LoadTextures() {
		
			if (g_icon == null) {
				g_icon = TextureUtility.CreateFromBase64 (
					"iVBORw0KGgoAAAANSUhEUgAAABAAAAAaCAYAAAC+aNwHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAN1wAADdcBQiibeAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAEoSURBVDiNpdS/LkNhHMbxj6pIhEETaViliYiuVLBIxeAOjEaDxR0YJe4Ak7iAJmIgjYWwcAE2sRgUE5LGMfTgtDnVc9oneYf3efN8319+7x+SK4ftVjOTAlDAUq+AZQx0C5jECFZ6qQC2UmSadI0AX5juBvAcAgIcpQ3nUMFTCKhjKg1gFosaTTwIIftpAOvIR+Y7eEe+PyGgjPPI/ELjTmTTHGNUAXZR7hYANyj1AnjDcBLAKF7b+LUkTSyGuz20+HOYSFJBAfcx/hqOkwDyGjcwqkxYWSUJoC/GW8Ue6tmWhXksYAh3OGkD/UQ1asz4e67RcSrmH0RT84uoxYR/xkabKn519k84QKkT4OOf8JX4Jjap2iZ8i/FOYRjDIR7xgktsYjBJ+BvNM0yV3qisLgAAAABJRU5ErkJggg=="
				);
				g_icon.hideFlags = HideFlags.HideAndDontSave;
				//this.title = new GUIContent ("Rhythmos Tool");//new GUIContent("Rhythmos Tool",g_icon);
				this.title = "Rhythmos Tool";
			}

			if (g_undoButton == null) {
				g_undoButton = TextureUtility.CreateFromBase64("iVBORw0KGgoAAAANSUhEUgAAAAoAAAAMCAYAAABbayygAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAN1wAADdcBQiibeAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAC5SURBVBiVfdEvSoRxEMbxz7PBJmJTBLtb9wQr3sAbGG2yaBKDwXN4AA8gG2x2BYNZFASDxSIKY3h/C/r6sgPDwMx3/qsqvxW7OPjn70En+MYVdgZBbOER1eDCNdarShoEkqziEvf4wCmeMdGfpSVuN7uBdxz/qTgkSS4wHS2lOrnDeJRkLcnKEnATr8EtvjCtgTmS3OAF9nWnmA0sdYRPjBeO8wY/4AwzzFunw/7B91rwDU+670wW8R/ubYzNgQZKdwAAAABJRU5ErkJggg==");
				g_undoButton.hideFlags = HideFlags.HideAndDontSave;
			}
			
			if (g_redoButton == null) {
				g_redoButton = TextureUtility.CreateFromBase64("iVBORw0KGgoAAAANSUhEUgAAAAoAAAAMCAYAAABbayygAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAN1wAADdcBQiibeAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAC8SURBVBiVhdG/SoJxFMbxzy9SCFoaBMFw16WhO5CG9m4gGp2E0NFBohtx9QKipdFJcGhobgoaGpwk4Tj4e+FV3+jAWZ7new7nj4hQTjygd6QfQB3MsMHoCMQFXhAZCnygVYAJNSxwiSec4wr3EbFSiiF+0Mzd24fzZd0cz1VmOU/QxdI/cYovNP4CUkp1nCVM0YiI2woo4S0vrIs1BhULPOZT3RVCH794zeYY7xma7H0G13Zf+cR3Lrop/C2tQJ5IXqd4bgAAAABJRU5ErkJggg==");
				g_redoButton.hideFlags = HideFlags.HideAndDontSave;
			}
		
		}
		
		void OnEnable () {



			/*_rhythmTab.AddRhythm("ljkkl√ß");
		_rhythmTab.AddRhythm("Item 2");
		_rhythmTab.AddRhythm("Item 3");
		_rhythmTab.AddRhythm("Item 4");	*/
			
			//LoadDatabaseXML();
			
			LoadTextures();
			
			if (_rhythmTab == null)
				_rhythmTab = new RhythmosEditorRhythmListTab();

			
			if (_noteTab == null)
				_noteTab = new RhythmosEditorNoteListTab();
	
				
			_noteTab.ClearUndoRedo();
			_rhythmTab.ClearRedoUndo();
			LoadTextures();
			
			_rhythmTab.Clear();
			_noteTab.Clear();
			
			_rhythmTab.SetNoteList(_noteTab.GetList());
			
			LoadConfig();
			
			
		}
		
		
		void OnDestroy() {
			
			SaveConfig();
			
			if (m_databaseFile != null)
				SaveDatabaseXML(m_lastOpenDatabase);
			
		}
		
		void SaveConfig() {

			if (!Directory.Exists ("Assets/Editor/")) 
			{
				Directory.CreateDirectory ("Assets/Editor");
			}

			FileStream file = File.Create("Assets/Editor/RhythmosEditorConfig.txt"); // FileMode.Create
			
			StreamWriter writer = new StreamWriter(file);
			
			writer.WriteLine("RhythmosEditor - Configuration\n");
			
			if (m_databaseFile == null)
				m_lastOpenDatabase = "none";
			
			string strmetro = "none";
			
			if (m_metroAudioClip != null)
				strmetro = AssetDatabase.GetAssetPath(m_metroAudioClip);
			
			writer.WriteLine("LastRhythmosDatabaseFile: " + m_lastOpenDatabase);
			writer.WriteLine("MetronomeSound: " + strmetro);
			
			
			writer.Close();
			file.Close();
			
			AssetDatabase.Refresh();
			
		}
		
		void LoadConfig() {
			
			if (File.Exists("Assets/Editor/RhythmosEditorConfig.txt")) {
				
				FileStream fileStream = File.OpenRead("Assets/Editor/RhythmosEditorConfig.txt");					
				StreamReader reader = new StreamReader(fileStream);
				
				while (!reader.EndOfStream) {
					
					string text = reader.ReadLine();
					string[] bits = text.Split(' ');
					
					if (bits[0] == "LastRhythmosDatabaseFile:") {
						m_lastOpenDatabase = bits[1];
						TextAsset asset = (TextAsset)AssetDatabase.LoadAssetAtPath(m_lastOpenDatabase,typeof(TextAsset));
						if (asset != null) {
							LoadDatabaseXML( asset);
						}
					} else if (bits[0] == "MetronomeSound:") {
						AudioClip asset = (AudioClip)AssetDatabase.LoadAssetAtPath(bits[1],typeof(AudioClip));
						if (asset != null) {
							m_metroAudioClip = asset;
						}
					}
					
					
				}
				
				reader.Close();
				fileStream.Close();
				
				
			} else {
				SaveConfig();
			}
			
		}
		
		
		bool LoadDatabaseXML(TextAsset textAsset) {
			
			//StringReader xml = new StringReader(file.text);
			
			if( textAsset != null) {
				
				MemoryStream assetStream = new MemoryStream(textAsset.bytes);
				XmlReader reader = XmlReader.Create(assetStream);
				
				XmlDocument xmlDoc = new XmlDocument();
				
				
				try	{
					xmlDoc.Load(reader);
				} catch (Exception ex) {
					m_message = "Error loading file: " + textAsset.name + ". Invalid XML file.";
					m_type = MessageType.Error;
					m_databaseFile = null;
					//Debug.LogError("RhythmosEditor: Error loading file: "+ textAsset.name + ". Invalid XML file: \n" + ex);
					//m_errors = "Error loading " + textAsset.name + ":\n" + ex;
					return false;
				} finally {
					
					
					_noteTab.Clear();
					_rhythmTab.Clear();
					
					_noteTab.LoadXMLElement(ref xmlDoc);
					_rhythmTab.LoadXMLElement(ref xmlDoc);
					_rhythmTab.SetMetroSound(m_metroAudioClip);
					
					
				}
				
				m_databaseFile = textAsset;
				m_lastOpenDatabase = AssetDatabase.GetAssetPath(textAsset);
				m_message = "Database loaded successfully.";
				m_type = MessageType.Info;
				
				return true;
				
			} else {
				
				m_message = "Text Asset is null. Impossible to load Rhythmos Database";
				m_type = MessageType.Error;
				m_databaseFile = null;
				//Debug.LogError("RhythmosEditor: Text Asset is null.\nImpossible to load Rhythmos Database.");
				
				return false;
			}
			
		}
		
		void SaveDatabaseXML(string filepath) {
			
			//string filepath = XMLUtility.GetPathByPlatform() + "/Resources/" + "RhythmosDatabase.xml";
			
			XmlDocument xmlDoc = new XmlDocument();
			
			XmlDeclaration declaration =  xmlDoc.CreateXmlDeclaration("1.0","UTF-8",null);
			
			XmlElement elmParent = xmlDoc.CreateElement("RhythmosDatabase");
			
			XmlElement elmNoteList = _noteTab.CreateXMLElement(ref xmlDoc);
			XmlElement elmRhythmList = _rhythmTab.CreateXMLElement(ref xmlDoc);
			
			elmParent.AppendChild(elmNoteList);
			elmParent.AppendChild(elmRhythmList);
			xmlDoc.AppendChild(declaration);
			xmlDoc.AppendChild(elmParent);
			
			xmlDoc.Save(filepath);
			
			AssetDatabase.Refresh();
			
			
		}
		
		void Update ()
		{
			
			/*if (_settingsTab.GetSaveButton()) {
			SaveDatabaseXML();
			_settingsTab.SetSaveButton(false);
		}*/
			
			if (m_toolbarSelection == 0) {
				_rhythmTab.Update();
			}

		}
		
		
		public void OnGUI () {
			
			
			string[] strTo = {"Rhythm List Tool", "Note Layout List", "Settings"};
			
			EditorGUI.BeginChangeCheck();
			int toolbar = GUILayout.Toolbar(m_toolbarSelection,strTo);
			if (EditorGUI.EndChangeCheck()) {
				m_toolbarSelection = toolbar;
				
				if (toolbar == 0) {
					_rhythmTab.SetMetroSound(m_metroAudioClip);
					_noteTab.ClearUndoRedo();
				} else if (toolbar == 1) {
					_rhythmTab.ClearRedoUndo();
				}
				
			}
			
			LoadTextures();

			if (m_toolbarSelection == 0) {
				
				if (m_databaseFile != null) {
					_rhythmTab.DrawHeader(new Rect(5, 24, position.width-15, 24),ref g_undoButton,ref g_redoButton);
					_rhythmTab.DrawListBox(new Rect(5, 24+24, 200, position.height-15-24), 18, Color.white);
					_rhythmTab.DrawRhythmSettings(new Rect(200+10,10+16+24,position.width-15-200,position.height-10-24));
				} else {
					EditorGUILayout.HelpBox("Please create or load a RhythmosDatabase.xml.\nAccess Settings tab of the Rhythmos Editor and load a Rhythmos Database to enable this option.",MessageType.Warning);
				}
				
				
				
			} else if (m_toolbarSelection == 1) {
				
				if (m_databaseFile != null) {
					_noteTab.DrawHeader(new Rect(5, 24, position.width-15, 24),ref g_undoButton,ref g_redoButton);
					_noteTab.Draw(new Rect(5, 24+24, position.width-10, position.height-15-24), 24, Color.white, new Color(62f/255f,125f/255f,231f/255f));
				} else {
					EditorGUILayout.HelpBox("Please create or load a RhythmosDatabase.xml.\nAccess Settings tab of the Rhythmos Editor and load a Rhythmos Database to enable this option.",MessageType.Warning);
				}
				
			}  else if (m_toolbarSelection == 2) {
				
				DrawSettings(new Rect(5, 24, position.width-10, position.height-15-24));
				
				/*if (_settingsTab.GetMetronomeAudioClip() != _timeline.GetMetronomeAudioClip()) {

				_timeline.SetMetronomeAudioClip(_settingsTab.GetMetronomeAudioClip());

			}*/
				
			}
			
			
			
			Repaint();	
			
		}
		
		public void DrawSettings (Rect Area) {
			
			GUILayout.BeginArea(Area, "");
			
			GUILayout.Label("Database Settings:", EditorStyles.boldLabel);
			
			
			//EditorGUILayout.LabelField("XML Database File:", "Assets/Resources/RhythmosDatabase.xml", EditorStyles.label);
			EditorGUI.BeginChangeCheck();
			TextAsset xmlFile  = (TextAsset)EditorGUILayout.ObjectField("Rhythmos Database",m_databaseFile ,typeof(TextAsset),false);
			if (EditorGUI.EndChangeCheck()) {
				
				LoadDatabaseXML(xmlFile);
				
			}
			
			EditorGUILayout.HelpBox(m_message,m_type);

			GUILayout.Label("File Options:", EditorStyles.boldLabel);

			
			GUILayout.BeginHorizontal(GUILayout.Width(position.width*0.5f));
			
			
			if (GUILayout.Button("New Database")) {
				
				string path = EditorUtility.SaveFilePanelInProject("New Rhythmos Database","RhythmosDatabase","xml","Please enter a file name to create new database.");
				
				if (path.Length != 0) {
					
					string pathToSave = path.Replace("Assets","");
					
					pathToSave = Application.dataPath + pathToSave;
					Debug.Log ("Created new Rhythmos Database in " + path);
					_rhythmTab.Clear();
					_noteTab.Clear();
					SaveDatabaseXML(pathToSave);
					
					m_lastOpenDatabase = pathToSave;
					m_databaseFile = (TextAsset)AssetDatabase.LoadAssetAtPath(path,typeof(TextAsset));
					
				}
				
			}
			
			if (m_databaseFile != null)
				GUI.enabled = true;
			else
				GUI.enabled = false;
			
			if (GUILayout.Button("Save Database As")) {
				
				string path = EditorUtility.SaveFilePanel("Save As Rhythmos Database",Application.dataPath,"RhythmosDatabase","xml");
				
				if (path.Length != 0) {
					
					Debug.Log ("Saved Rhythmos Database in " + path);
					SaveDatabaseXML(path);
					
				}
				
			}
			
			/*if (GUILayout.Button("Append Database")) {
				
			}*/
			
			GUI.enabled = true;
			
			
			GUILayout.EndHorizontal();
			
			if (m_databaseFile != null) {
				
				GUILayout.Label("Editor Settings:", EditorStyles.boldLabel);
				GUILayout.BeginHorizontal();
				EditorGUILayout.PrefixLabel("Metronome Audio Clip:", EditorStyles.label);
				EditorGUI.BeginChangeCheck();
				AudioClip metro  = (AudioClip)EditorGUILayout.ObjectField(m_metroAudioClip ,typeof(AudioClip),false);
				if (EditorGUI.EndChangeCheck()) {
					
					m_metroAudioClip = metro;
				}
				GUILayout.EndHorizontal();
				
			}
			
			//if (GUILayout.Button("Export as XML"))
			//	m_saveButton = true;
			//if (GUILayout.Button("Import XML"))
			//	m_saveButton = true;
			
			
			GUILayout.EndArea();
			
		}
		
		
	}
}

