{
  "api/RhythmosEngine.AudioReference.html": {
    "href": "api/RhythmosEngine.AudioReference.html",
    "title": "Class AudioReference | Rhythmos Engine Documentation Website",
    "keywords": "Class AudioReference Stores UnityEngine.AudioClip reference and related UnityEngine.Color identifier Inheritance System.Object AudioReference Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : RhythmosEngine Assembly : RhythmosEngine.dll Syntax [Serializable] public class AudioReference Constructors | Improve this Doc View Source AudioReference() Initializes a new instance of the AudioReference Declaration public AudioReference() | Improve this Doc View Source AudioReference(AudioReference) Copy constructor Declaration public AudioReference(AudioReference otherAudioReference) Parameters Type Name Description AudioReference otherAudioReference Other AudioReference instance to copy | Improve this Doc View Source AudioReference(AudioClip) Initializes a new instance of the AudioReference Declaration public AudioReference(AudioClip clip) Parameters Type Name Description UnityEngine.AudioClip clip AudioClip | Improve this Doc View Source AudioReference(AudioClip, Color) Initializes a new instance of the AudioReference Declaration public AudioReference(AudioClip clip, Color color) Parameters Type Name Description UnityEngine.AudioClip clip AudioClip UnityEngine.Color color Color identifier Fields | Improve this Doc View Source Clip Actual UnityEngine.AudioClip reference Declaration public AudioClip Clip Field Value Type Description UnityEngine.AudioClip | Improve this Doc View Source Color Color identifier Declaration public Color Color Field Value Type Description UnityEngine.Color"
  },
  "api/RhythmosEngine.DatabaseLoadException.html": {
    "href": "api/RhythmosEngine.DatabaseLoadException.html",
    "title": "Class DatabaseLoadException | Rhythmos Engine Documentation Website",
    "keywords": "Class DatabaseLoadException Represents an exception for database loader RhythmosDatabase Inheritance System.Object System.Exception DatabaseLoadException Implements System.Runtime.InteropServices._Exception System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : RhythmosEngine Assembly : RhythmosEngine.dll Syntax public class DatabaseLoadException : Exception, _Exception, ISerializable Constructors | Improve this Doc View Source DatabaseLoadException(String) Constructor Declaration public DatabaseLoadException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source DatabaseLoadException(String, Exception) Constructor Declaration public DatabaseLoadException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException Implements System.Runtime.InteropServices._Exception System.Runtime.Serialization.ISerializable"
  },
  "api/RhythmosEngine.html": {
    "href": "api/RhythmosEngine.html",
    "title": "Namespace RhythmosEngine | Rhythmos Engine Documentation Website",
    "keywords": "Namespace RhythmosEngine Classes AudioReference Stores UnityEngine.AudioClip reference and related UnityEngine.Color identifier DatabaseLoadException Represents an exception for database loader RhythmosDatabase Note Represent an musical note. NoteLayout Representation of a 'note layout' which stores audio clip and related properties. Rhythm Represents an musical rhythm. RhythmosDatabase Provides a data storage for rhythms and note layouts created from the RhythmosEditor to use in your game. RhythmosPlayer RhythmPlayer is component that allows you to play rhythms in your game RhythmosUtility Rhythm utilities functions Interfaces IAssetLoader Provides a way to load assets."
  },
  "api/RhythmosEngine.IAssetLoader.html": {
    "href": "api/RhythmosEngine.IAssetLoader.html",
    "title": "Interface IAssetLoader | Rhythmos Engine Documentation Website",
    "keywords": "Interface IAssetLoader Provides a way to load assets. Namespace : RhythmosEngine Assembly : RhythmosEngine.dll Syntax public interface IAssetLoader Methods | Improve this Doc View Source LoadClip(String) Load AudioClip by given path. Declaration AudioClip LoadClip(string path) Parameters Type Name Description System.String path Path to AudioClip asset Returns Type Description UnityEngine.AudioClip AudioClip asset"
  },
  "api/RhythmosEngine.Note.html": {
    "href": "api/RhythmosEngine.Note.html",
    "title": "Class Note | Rhythmos Engine Documentation Website",
    "keywords": "Class Note Represent an musical note. Inheritance System.Object Note Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : RhythmosEngine Assembly : RhythmosEngine.dll Syntax [Serializable] public class Note Constructors | Improve this Doc View Source Note() Initializes a new instance of the Note . Declaration public Note() | Improve this Doc View Source Note(Note) Initializes a new instance of Note by cloning another one. Declaration public Note(Note note) Parameters Type Name Description Note note Note. | Improve this Doc View Source Note(Single, Boolean, Int32) Initializes a new instance of the Note . Declaration public Note(float duration, bool isRest, int layoutIndex) Parameters Type Name Description System.Single duration Note Duration. System.Boolean isRest If set to true is rest. System.Int32 layoutIndex Layout index. Fields | Improve this Doc View Source duration Duration in seconds of this note Declaration public float duration Field Value Type Description System.Single | Improve this Doc View Source isRest Defines if this note is a rest Declaration public bool isRest Field Value Type Description System.Boolean | Improve this Doc View Source layoutIndex ID reference of a NoteLayout Declaration public int layoutIndex Field Value Type Description System.Int32 Methods | Improve this Doc View Source Clone() Clones this Note instance to new one Declaration public Note Clone() Returns Type Description Note Cloned Note instace"
  },
  "api/RhythmosEngine.NoteLayout.html": {
    "href": "api/RhythmosEngine.NoteLayout.html",
    "title": "Class NoteLayout | Rhythmos Engine Documentation Website",
    "keywords": "Class NoteLayout Representation of a 'note layout' which stores audio clip and related properties. Inheritance System.Object NoteLayout Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : RhythmosEngine Assembly : RhythmosEngine.dll Syntax [Serializable] [Obsolete(\"NoteLayout is deprecated. Please use AudioReference\", true)] public class NoteLayout Constructors | Improve this Doc View Source NoteLayout() Initializes a new instance of the NoteLayout class. Declaration public NoteLayout() | Improve this Doc View Source NoteLayout(NoteLayout) Initializes a new instance of the NoteLayout based in another NoteLayout. Declaration public NoteLayout(NoteLayout noteLayout) Parameters Type Name Description NoteLayout noteLayout Note layout. | Improve this Doc View Source NoteLayout(String) Initializes a new instance of the NoteLayout . Audio clip will be null Declaration public NoteLayout(string name) Parameters Type Name Description System.String name Note layout name | Improve this Doc View Source NoteLayout(String, AudioClip) Initializes a new instance of the NoteLayout . Color is randomized. Declaration public NoteLayout(string name, AudioClip clip) Parameters Type Name Description System.String name Note layout Name. UnityEngine.AudioClip clip Note layout AudioClip. | Improve this Doc View Source NoteLayout(String, AudioClip, Color) Initializes a new instance of the NoteLayout . Declaration public NoteLayout(string name, AudioClip clip, Color color) Parameters Type Name Description System.String name Note layout Name. UnityEngine.AudioClip clip Note layout Clip. UnityEngine.Color color Note layout Color. Fields | Improve this Doc View Source Clip Note audio clip. Declaration public AudioClip Clip Field Value Type Description UnityEngine.AudioClip | Improve this Doc View Source Color Note color (used in RhythmosEditor) Declaration public Color Color Field Value Type Description UnityEngine.Color | Improve this Doc View Source Name Note name. Declaration public string Name Field Value Type Description System.String"
  },
  "api/RhythmosEngine.Rhythm.html": {
    "href": "api/RhythmosEngine.Rhythm.html",
    "title": "Class Rhythm | Rhythmos Engine Documentation Website",
    "keywords": "Class Rhythm Represents an musical rhythm. Inheritance System.Object Rhythm Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : RhythmosEngine Assembly : RhythmosEngine.dll Syntax [Serializable] public class Rhythm Constructors | Improve this Doc View Source Rhythm() Initializes a new instance of the Rhythm class. Declaration public Rhythm() | Improve this Doc View Source Rhythm(Rhythm) Initializes a new instance of the Rhythm class cloning another Rhythm instance. Declaration public Rhythm(Rhythm rhythm) Parameters Type Name Description Rhythm rhythm Rhythm. | Improve this Doc View Source Rhythm(String, Single) Initializes a new instance of the Rhythm class. Declaration public Rhythm(string name, float bpm) Parameters Type Name Description System.String name Name. System.Single bpm BPM. Fields | Improve this Doc View Source BPM Beats per minute. Declaration public float BPM Field Value Type Description System.Single | Improve this Doc View Source Name Rhythm name. Declaration public string Name Field Value Type Description System.String Properties | Improve this Doc View Source Count Gets the note count. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source NoteCount Gets the note count. Declaration [Obsolete(\"Please use 'Count' property instead. Just to simplify things.\", true)] public int NoteCount { get; } Property Value Type Description System.Int32 The note count. | Improve this Doc View Source Notes Get notes list of this rhythm. Declaration public List<Note> Notes { get; } Property Value Type Description System.Collections.Generic.List < Note > Methods | Improve this Doc View Source AppendNote(Note) Appends a note to Rhythm. Declaration public void AppendNote(Note note) Parameters Type Name Description Note note Note. | Improve this Doc View Source AppendNote(Int32, Single, Boolean) Appends a note. Declaration public void AppendNote(int layoutIndex, float noteDuration, bool isRest) Parameters Type Name Description System.Int32 layoutIndex Layout index. System.Single noteDuration Note_duration. System.Boolean isRest If set to true is_pause. | Improve this Doc View Source Clear() Clear the note list. Declaration public void Clear() | Improve this Doc View Source Duration() Duration of Rhythm by BPM. Declaration public float Duration() Returns Type Description System.Single | Improve this Doc View Source GetNoteAt(Int32) Gets the note at index. Declaration public Note GetNoteAt(int index) Parameters Type Name Description System.Int32 index Index. Returns Type Description Note The Note . | Improve this Doc View Source InsertNoteAt(Int32, Note) Inserts a note at index. Declaration public void InsertNoteAt(int index, Note note) Parameters Type Name Description System.Int32 index Index. Note note Note. | Improve this Doc View Source NoteList() Notes the list. Declaration [Obsolete(\"Please use 'Notes' property instead. Just to simplify things.\", true)] public List<Note> NoteList() Returns Type Description System.Collections.Generic.List < Note > Note list. | Improve this Doc View Source RemoveNote(Int32) Removes a note at index. Declaration public void RemoveNote(int index) Parameters Type Name Description System.Int32 index Index. | Improve this Doc View Source ReplaceNote(Int32, Note) Replaces a note at index. Declaration public void ReplaceNote(int index, Note note) Parameters Type Name Description System.Int32 index Index. Note note Note. | Improve this Doc View Source SwapNote(Int32, Int32) Swaps a note in the index to swapIndex. Declaration public void SwapNote(int index, int swapIndex) Parameters Type Name Description System.Int32 index Index. System.Int32 swapIndex Swap index."
  },
  "api/RhythmosEngine.RhythmosDatabase.html": {
    "href": "api/RhythmosEngine.RhythmosDatabase.html",
    "title": "Class RhythmosDatabase | Rhythmos Engine Documentation Website",
    "keywords": "Class RhythmosDatabase Provides a data storage for rhythms and note layouts created from the RhythmosEditor to use in your game. Inheritance System.Object RhythmosDatabase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : RhythmosEngine Assembly : RhythmosEngine.dll Syntax [Serializable] public class RhythmosDatabase Constructors | Improve this Doc View Source RhythmosDatabase() Initializes a new instance of the RhythmosDatabase . Declaration public RhythmosDatabase() | Improve this Doc View Source RhythmosDatabase(TextAsset) Initializes a new instance of the RhythmosDatabase . Declaration [Obsolete(\"This constructor is deprecated and is unsafe. Please use 'Load' static method instead.\", true)] public RhythmosDatabase(TextAsset textAsset) Parameters Type Name Description UnityEngine.TextAsset textAsset Text asset. Properties | Improve this Doc View Source AudioReferences Gets the AudioClip reference list contained in the RhythmosDatabase . Declaration public List<AudioReference> AudioReferences { get; } Property Value Type Description System.Collections.Generic.List < AudioReference > | Improve this Doc View Source AudioReferencesCount Gets the number of note layout count contained in the RhythmosDatabase . Declaration public int AudioReferencesCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Rhythms Gets the Rhythm list contained in the RhythmosDatabase . Declaration public List<Rhythm> Rhythms { get; } Property Value Type Description System.Collections.Generic.List < Rhythm > | Improve this Doc View Source RhythmsCount Gets the number of rhythms contained in the RhythmosDatabase . Declaration public int RhythmsCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TextAsset Get TextAsset reference of this RhythmosDatabase . Declaration public TextAsset TextAsset { get; } Property Value Type Description UnityEngine.TextAsset | Improve this Doc View Source Version Get the version of the RhythmosDatabase . Declaration public string Version { get; } Property Value Type Description System.String Methods | Improve this Doc View Source AddAudioClipReference(AudioReference) Adds an UnityEngine.AudioClip reference to RhythmosDatabase Declaration public void AddAudioClipReference(AudioReference audioClipReference) Parameters Type Name Description AudioReference audioClipReference AudioClip referencet Exceptions Type Condition System.ArgumentNullException Throws when audioClipReference is null | Improve this Doc View Source AddNoteLayout(NoteLayout) Adds a note layout Declaration [Obsolete(\"'AddNoteLayout' is deprecated and will be removed in the next version. Use 'AddAudioClipReference' instead\", true)] public void AddNoteLayout(NoteLayout newNoteLayout) Parameters Type Name Description NoteLayout newNoteLayout New note layout | Improve this Doc View Source AddRhythm(Rhythm) Adds a Rhythm to this database Declaration public void AddRhythm(Rhythm newRhythm) Parameters Type Name Description Rhythm newRhythm New rhythm Exceptions Type Condition System.ArgumentNullException Throws when newRhythm is null | Improve this Doc View Source ClearNoteLayoutList() Clears the note layout list Declaration [Obsolete(\"'ClearRhythmList' is deprecated and will be removed in the next version. Use 'AudioReferences.Clear()' property\", false)] public void ClearNoteLayoutList() | Improve this Doc View Source ClearRhythmList() Clears the rhythm list Declaration [Obsolete(\"'ClearRhythmList' is deprecated and will be removed in the next version. Use 'Rhythms.Clear()' property\", false)] public void ClearRhythmList() | Improve this Doc View Source FindAudioReferenceByName(String) Finds AudioClipReference by given UnityEngine.AudioClip name Declaration public AudioReference FindAudioReferenceByName(string name) Parameters Type Name Description System.String name UnityEngine.AudioClip name Returns Type Description AudioReference Returns AudioReference tuple, otherwise null | Improve this Doc View Source FindNoteLayoutByName(String) Finds note layout by name. Declaration [Obsolete(\"'FindNoteLayoutByName' is deprecated and will be removed in the next version. Use 'FindAudioReferenceByName' property\", false)] public AudioReference FindNoteLayoutByName(string name) Parameters Type Name Description System.String name NoteLayout name Returns Type Description AudioReference Note layout. If null, the requested Note Layout doesn't exist. | Improve this Doc View Source FindRhythmByName(String) Finds a Rhythm by given name Declaration public Rhythm FindRhythmByName(string name) Parameters Type Name Description System.String name Rhythm name Returns Type Description Rhythm Rhythm instance otherwise null. | Improve this Doc View Source GetNoteLayoutList() Gets the note layout list. Declaration [Obsolete(\"'GetNoteLayoutList' is deprecated and will be removed in the next version. Use AudioReferences property instead.\", true)] public List<AudioReference> GetNoteLayoutList() Returns Type Description System.Collections.Generic.List < AudioReference > The note layout list. | Improve this Doc View Source GetRhythmList() Gets the rhythm list. Declaration [Obsolete(\"'GetRhythmList' is deprecated and will be removed in the next version. Use Rhythms property instead.\", true)] public List<Rhythm> GetRhythmList() Returns Type Description System.Collections.Generic.List < Rhythm > The rhythm list. | Improve this Doc View Source Load(String) Loads RhythmosDatabas by given resource path (\"Assets/Resources/...\"). Declaration public static RhythmosDatabase Load(string resourcePath) Parameters Type Name Description System.String resourcePath Resource path Returns Type Description RhythmosDatabase Loaded RhythmosDatabse Exceptions Type Condition DatabaseLoadException Throws if could not load RhythmosDatabase file correctly | Improve this Doc View Source Load(TextAsset) Load RhythmosDatabase from a TextAsset (XML file). Declaration public static RhythmosDatabase Load(TextAsset textAsset) Parameters Type Name Description UnityEngine.TextAsset textAsset Text asset Returns Type Description RhythmosDatabase Loaded RhythmosDatabse Exceptions Type Condition DatabaseLoadException Throws if could not load RhythmosDatabase file correctly | Improve this Doc View Source Load(TextAsset, IAssetLoader) Load RhythmosDatabase from a TextAsset (XML file). NOTE: The loader parameter defines how the RhythmDatabase will load AudioClips. In Unity to load an asset in runtime you need to use UnityEngine.Resources utility. To work properly with RhythmosDatabase, make sure to put your assets inside \"Resources\" folder. In the future we'll provide a better way to manage the RhtythmosDatabase using UnityEngine.ScriptableObject . Declaration public static RhythmosDatabase Load(TextAsset textAsset, IAssetLoader loader) Parameters Type Name Description UnityEngine.TextAsset textAsset Text asset IAssetLoader loader Implementation to load assets Returns Type Description RhythmosDatabase Loaded RhythmosDatabse Exceptions Type Condition DatabaseLoadException Throws if could not load RhythmosDatabase file correctly | Improve this Doc View Source LoadRhythmosDatabase(String) Loads the rhythmos database. Declaration [Obsolete(\"'LoadRhythmosDatabase' is deprecated and will be removed in the next version. Please use 'Load' static method instead.\", true)] public bool LoadRhythmosDatabase(string resourcePath) Parameters Type Name Description System.String resourcePath Resource path. Returns Type Description System.Boolean true , if rhythmos database was loaded, false otherwise. | Improve this Doc View Source LoadRhythmosDatabase(TextAsset) Loads Rhythmos Database from a Text Asset (XML document). Declaration [Obsolete(\"'LoadRhythmosDatabase' is deprecated and will be removed in the next version. Please use 'Load' static method instead.\", true)] public bool LoadRhythmosDatabase(TextAsset textAsset) Parameters Type Name Description UnityEngine.TextAsset textAsset Text asset. Returns Type Description System.Boolean true , if rhythmos database was loaded, false otherwise. | Improve this Doc View Source PlayRhythm(String, Single, Boolean, Boolean) Play a rhythm. Declaration public RhythmosPlayer PlayRhythm(string rhythmName, float volume = 1F, bool loop = false, bool destroyOnEnd = true) Parameters Type Name Description System.String rhythmName Rhythm name System.Single volume Volume System.Boolean loop Should rhyhthm loop? System.Boolean destroyOnEnd If set to true destroy on end Returns Type Description RhythmosPlayer The Rhythm Player. If null, the requested rhythm doesn't exist | Improve this Doc View Source RemoveAudioClipReference(Int32) Removes an AudioClipReference at given index Declaration public void RemoveAudioClipReference(int index) Parameters Type Name Description System.Int32 index Index to be removed | Improve this Doc View Source RemoveNoteLayout(Int32) Removes a note layout at index Declaration [Obsolete(\"'RemoveNoteLayout' is deprecated and will be removed in the next version. Use 'RemoveAudioClipReference' instead\", true)] public void RemoveNoteLayout(int index) Parameters Type Name Description System.Int32 index Index. | Improve this Doc View Source RemoveRhythm(Int32) Removes a rhythm at index. Declaration public void RemoveRhythm(int index) Parameters Type Name Description System.Int32 index Index"
  },
  "api/RhythmosEngine.RhythmosPlayer.html": {
    "href": "api/RhythmosEngine.RhythmosPlayer.html",
    "title": "Class RhythmosPlayer | Rhythmos Engine Documentation Website",
    "keywords": "Class RhythmosPlayer RhythmPlayer is component that allows you to play rhythms in your game Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour RhythmosPlayer Inherited Members UnityEngine.MonoBehaviour.IsInvoking() UnityEngine.MonoBehaviour.CancelInvoke() UnityEngine.MonoBehaviour.Invoke(System.String, System.Single) UnityEngine.MonoBehaviour.InvokeRepeating(System.String, System.Single, System.Single) UnityEngine.MonoBehaviour.CancelInvoke(System.String) UnityEngine.MonoBehaviour.IsInvoking(System.String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) UnityEngine.MonoBehaviour.StartCoroutine(System.String, System.Object) UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine) UnityEngine.MonoBehaviour.StopCoroutine(System.String) UnityEngine.MonoBehaviour.StopAllCoroutines() UnityEngine.MonoBehaviour.print(System.Object) UnityEngine.MonoBehaviour.useGUILayout UnityEngine.MonoBehaviour.runInEditMode UnityEngine.Behaviour.enabled UnityEngine.Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) UnityEngine.Component.GetComponent<T>() UnityEngine.Component.TryGetComponent(System.Type, UnityEngine.Component) UnityEngine.Component.TryGetComponent<T>(T) UnityEngine.Component.GetComponent(System.String) UnityEngine.Component.GetComponentInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentInChildren(System.Type) UnityEngine.Component.GetComponentInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentsInChildren(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean) UnityEngine.Component.GetComponentsInChildren<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type) UnityEngine.Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type, System.Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean) UnityEngine.Component.GetComponentsInParent<T>(System.Boolean, System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponents<T>() UnityEngine.Component.CompareTag(System.String) UnityEngine.Component.SendMessageUpwards(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) UnityEngine.Component.SendMessageUpwards(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, System.Object) UnityEngine.Component.SendMessage(System.String) UnityEngine.Component.SendMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.SendMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object, UnityEngine.SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) UnityEngine.Component.BroadcastMessage(System.String, UnityEngine.SendMessageOptions) UnityEngine.Component.transform UnityEngine.Component.gameObject UnityEngine.Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.networkView UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleSystem UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) UnityEngine.Object.ToString() UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : RhythmosEngine Assembly : RhythmosEngine.dll Syntax public class RhythmosPlayer : MonoBehaviour Fields | Improve this Doc View Source m_playing Defines if rhythm is being played Declaration protected bool m_playing Field Value Type Description System.Boolean Properties | Improve this Doc View Source destroyOnEnd Gets or sets a value indicating when the played rhythm was finished of this RhythmosPlayer will destroy or not. Declaration public bool destroyOnEnd { get; set; } Property Value Type Description System.Boolean true if will destroy on end of played rhythm the GameObject; otherwise, false . | Improve this Doc View Source isPaused Gets a value indicating whether this RhythmosPlayer is paused. Declaration public bool isPaused { get; } Property Value Type Description System.Boolean true if is paused; otherwise, false . | Improve this Doc View Source isPlaying Gets a value indicating whether this RhythmosPlayer is playing. Declaration public bool isPlaying { get; } Property Value Type Description System.Boolean true if is playing; otherwise, false . | Improve this Doc View Source loop Gets or sets a value indicating whether this RhythmosPlayer is looping. Declaration public bool loop { get; set; } Property Value Type Description System.Boolean true if loop; otherwise, false . | Improve this Doc View Source noteIndex Gets the actual index of playing rhythm. Declaration public int noteIndex { get; } Property Value Type Description System.Int32 The index of the note. | Improve this Doc View Source rhythm Gets the rhythm. Declaration public Rhythm rhythm { get; } Property Value Type Description Rhythm The rhythm. | Improve this Doc View Source rhythmDatabase Gets or sets the rhythm database. Declaration public RhythmosDatabase rhythmDatabase { get; set; } Property Value Type Description RhythmosDatabase The rhythm database. | Improve this Doc View Source time Gets the playback position in seconds. Declaration public float time { get; } Property Value Type Description System.Single The played time. | Improve this Doc View Source trackPosition Gets the track position in seconds Declaration public float trackPosition { get; } Property Value Type Description System.Single The track position. | Improve this Doc View Source volume Gets or sets the volume. Declaration public float volume { get; set; } Property Value Type Description System.Single The volume. Methods | Improve this Doc View Source GetCurrentNote() Gets the actual played note. Declaration public Note GetCurrentNote() Returns Type Description Note The actual note. | Improve this Doc View Source GetLastAudioSource() Gets the last audio source. Declaration public AudioSource GetLastAudioSource() Returns Type Description UnityEngine.AudioSource The last audio source. | Improve this Doc View Source HasNotePlayed() Determines if a note has played. Declaration public bool HasNotePlayed() Returns Type Description System.Boolean true if this instance has note played; otherwise, false . | Improve this Doc View Source Pause() Pause the rhythm. Declaration public void Pause() | Improve this Doc View Source Play() Play RhythmosPlayer. Declaration public void Play() | Improve this Doc View Source PlayRhythm(Rhythm, RhythmosDatabase, Single, Boolean, Boolean) Play a rhythm. Declaration public static RhythmosPlayer PlayRhythm(Rhythm rhythm, RhythmosDatabase database, float volume = 1F, bool loop = false, bool destroyOnEnd = true) Parameters Type Name Description Rhythm rhythm Rhythm. RhythmosDatabase database Database. System.Single volume Volume. System.Boolean loop If set to true loop. System.Boolean destroyOnEnd If set to true destroy on end. Returns Type Description RhythmosPlayer The rhythm. | Improve this Doc View Source Stop() Stop the rhythm. Declaration public void Stop() | Improve this Doc View Source UnPause() Unpause the rhythm Declaration public void UnPause()"
  },
  "api/RhythmosEngine.RhythmosUtility.html": {
    "href": "api/RhythmosEngine.RhythmosUtility.html",
    "title": "Class RhythmosUtility | Rhythmos Engine Documentation Website",
    "keywords": "Class RhythmosUtility Rhythm utilities functions Inheritance System.Object RhythmosUtility Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : RhythmosEngine Assembly : RhythmosEngine.dll Syntax public static class RhythmosUtility Methods | Improve this Doc View Source CheckDatabaseRhythmMatch(RhythmosDatabase, Rhythm) Check if the Source rhythm matches with some of the rhythms from a RhythmosDatabase. Declaration public static Rhythm CheckDatabaseRhythmMatch(RhythmosDatabase rhythmDatabase, Rhythm sourceRhythm) Parameters Type Name Description RhythmosDatabase rhythmDatabase RhythmDatabase to search in Rhythm sourceRhythm Rhythm to check. Returns Type Description Rhythm the matched Rhythm from the database, null otherwise. | Improve this Doc View Source CheckRhythmsMatch(Rhythm, Rhythm) Checks if the source Rhythm A matches with a destination Rhythm B according with notes layout. The note duration is ignored. Declaration public static bool CheckRhythmsMatch(Rhythm rhythmA, Rhythm rhythmB) Parameters Type Name Description Rhythm rhythmA Rhythm A Rhythm rhythmB Rhythm B Returns Type Description System.Boolean true , if was matched, false otherwise. | Improve this Doc View Source CheckRhythmsPrecision(Rhythm, Rhythm, Single) Checks the precision of a source rhythm by a \"compare\" rhythm. Failure rate is a percentage from 0.0 to 1.0 for precision value. Declaration public static float CheckRhythmsPrecision(Rhythm rhythmSource, Rhythm rhythmCompare, float failureRate) Parameters Type Name Description Rhythm rhythmSource Rhythm source. Rhythm rhythmCompare Rhythm compare. System.Single failureRate Failure Rate. Returns Type Description System.Single The precision between 0.0f ... 1.0f of the rhythm matches. If -1, the compare was unsuccessful."
  },
  "articles/brief-introduction-rhythms.html": {
    "href": "articles/brief-introduction-rhythms.html",
    "title": "Brief Introduction to Rhythms | Rhythmos Engine Documentation Website",
    "keywords": "Brief Introduction to Rhythms To understand how Rhythm Engine works, let see a little bit of Music Notation theory. Rhythm it is a sequence of sounds at regular intervals. Rhythms can have repetition and dynamic alternation with strong and weak beats. Notes and Rests These regular intervals can be interpreted as notes . Each note has an symbol that represents the time value and their relative length in relation to each other. The following table shows the most commons notes names (American US terminology) and their respective beat values: Symbol Name Value Whole note 4 beats Half note 2 beats Quarter note 1 beat Eighth note 1/2 beat Sixteenth note 1/4 beat We also have the rests that is sign of the absence of sound - intervals od silence. Each rest symbols have note value for length indicating how long the silence should last. We represent rest as: Symbol Name Value Whole rest 4 beats Half rest 2 beats Quarter rest 1 beat Eighth rest 1/2 beat Sixteenth rest 1/4 beat Notes and rests values are subdivision of the longer note in half. For example, the quarter note is half of the value of half note. The below diagram shows how the note subdivision works: at every level, the division of note values will happen by halves. Tempo Another important concept is the tempo ( time in Italian) that refers to the the speed at which a piece of music will be played. This is often measured in beats per minute (aka. BPM). A fast tempo will have high BPM value. Suppose an imaginary song where its tempo is 80 BPM. So we can say that if pulse is equal to 0.75 seconds. Pulse is calculated by dividing 60 by the BPM of the song. Example: 60 / bpm = pulse in seconds 60 / 80 = 0.75s The song tempo applies to the musical notes duration. For example, the tempo of a song is 40 BPM, the length of each would be: whole note (4 beats) = 2.66 seconds = 4 * (40 / 60) half note (2 beats) = 1.33 seconds = 2 * (40 / 60) quarter note (1 beat) = 0.66 seconds = 1 * (40 / 60) eighth note (1/2 beat) = 0.33 seconds = (1 / 2) * (40 / 60) Some BPM values and multiplier in seconds (float): BPM Seconds 240 0.25 180 0.33 120 0.5 80 0.75 60 1 40 1.5 20 2 Pitch And the last concept is pitch . The pitch defines the note between high and low tones. The image below demonstrates how low and high notes are differentiated into a musical pentagram on the scale of G major. The higher up the stave, the higher the note sounds. In the current version of RhythmosEngine it does not enables to simulate the sound of instrument in different tones. In order to cover these aspects, the tool adopted an class called AudioReference . Sources Rhythmic Values and Simple Metre - Music Theory Blog Tempo - DaCapoAlCoda Rest - Wikipedia"
  },
  "articles/code-examples.html": {
    "href": "articles/code-examples.html",
    "title": "Code Examples | Rhythmos Engine Documentation Website",
    "keywords": "Code Examples This session has code examples to implementing the RhythmosEngine in your game. Make sure to read the installation guide. Quick start Singleton pattern for RhythmosDatabase Creating rhythms in runtime Playing rhythms Quick Start The RhythmosDatabase class loads your rhythms from XML file that you have created in RhtyhmosEditor. The code below is simplest way to load RhythmosDatabase: using System.Collections; using UnityEngine; using RhythmosEngine; public class RhythmsComponent : MonoBehaviour { private RhythmosDatabase rhythmosDatabase; // IMPORTANT: Reference the XML file via Unity inspector public TextAsset rhythmosFile; void Awake() { try { // Loads the RhythmosDatabase from TextAsset rhythmosDatabase = RhythmosDatabase.Load(rhythmosFile); } catch (Exception ex) { Debug.LogError(ex); } } void Start() { // Display in the console the amount of rhythms and note layouts. Debug.Log(\"Total of Rhythms: \" + rhythmosDatabase.RhythmsCount); Debug.Log(\"Total of NoteLayout: \" + rhythmosDatabase.NoteLayoutCount); } } Singleton pattern for RhythmosDatabase If your game use a lot of rhythms all of the time create a global component of rhythms. Use a single GameObject that's in charge of our rhythms storage class. using UnityEngine; using System.Collections; using RhythmosEngine; public class GlobalRhythms : MonoBehaviour { public RhythmosDatabase rhythmosDatabase; private static GlobalRhythms instance; // get the instance of GlobalRhythms public static GlobalRhythms globalInstance { get { if (instance == null){ // In Unity above of 4.2 or above use this line of code: //_instance = GameObject.FindObjectOfType<MusicManager>(); instance = (GlobalRhythms)GameObject.FindObjectOfType(typeof(GlobalRhythms)); // Set at unity this GameObject can't be removed. DontDestroyOnLoad(instance.gameObject); } return instance; } } void Awake() { if (instance == null) { // If don't have a singleton and this component is the first, make this component the singleton instance = this; // load a RhythmosDatabase file from the Resources directory rhythmosDatabase = RhythmosDatabase.Load(\"Files/RhythmosDatabase\"); DontDestroyOnLoad(this); } else { // Destroy another GlobalRhythms if already exist this singleton. if (this != instance) { Destroy(this.gameObject); } } } } Creating rhythms in runtime Rhythm CreateRhythm() { Rhythm rhythm = new Rhythm(); rhythm.Name = \"Jazzy Beat\"; rhythm.BPM = 120; // remember: layout index is a index reference to a RhythmosDatabase Note note1 = new Note(0.5f,false,0); Note note2 = new Note(0.25f,false,1); Note note3 = new Note(0.5f,false,0); rhythm.AppendNote(note1); rhythm.AppendNote(note2); rhythm.AppendNote(note3); return rhythm; } Playing rhythms The following snippet just plays a Rhythm from loaded RhythmosDatabase . void PlayRhythm() { // play a rhythm from a loaded RhythmosDatabase RhythmosPlayer player = rhythmosDatabase.PlayRhythm(\"MyBeautifulRhythm\", 1f); player.loop = true; player.destroyOnEnd = false; }"
  },
  "articles/downloads-installation-guide.html": {
    "href": "articles/downloads-installation-guide.html",
    "title": "Downloads and Installation Guide | Rhythmos Engine Documentation Website",
    "keywords": "Downloads and Installation Guide You can get the Rhythmos Engine in the following links: Version Supported Unity Version Link v1.3 >= 2020.3.13f1 Download here v1.1 3.6, 4.6.0f, 5 and 2017 Get in Unity Asset Store Installation The Rhythmos Engine has two main files: RhythmosEngine.dll : contains a collection of classes and structures to assist the using of rhythms in game runtime. Installation location on Unity: Assets/Plugins/RhythmosEngine RhythmosEditor.dll : It's an Unity Editor window to create your own rhythms and notes database. This file must be in Assets/Editor/RhythmosEditor directory. To open the Rhythmos Editor, in Unity Toolbar go to Tools > Rhythmos Editor Important Notes All notes sounds - the AudioClips - need to be located in the Assets/Resources directory to play sounds during the game. The rhythms database is on XML format. It brings together the entire contents of rhythms and notes that you have created. If you want to load this file in runtime with TextAsset , the database must be in the Assets/Resources directory too. RhythmosEditor.dll save a configuration file in Assets/Editor directory only to load the last edited database."
  },
  "articles/rhythmos-editor-creating-rhythm.html": {
    "href": "articles/rhythmos-editor-creating-rhythm.html",
    "title": "Rhythmos Editor - Creating Rhythms | Rhythmos Engine Documentation Website",
    "keywords": "Rhythmos Editor - Creating Rhythms The main feature of Rhythmos Editor is the rhythm editor in located in the first tab: Rhythms . On the left there is a scroll view that lists all rhythms that you have created. While in the left there is the rhythm track editor. To create a rhythm follow the below steps: Click in the bottom button with plus sign + Your new rhythm will be added to list of rhythms. We're ready to compose rhythms! Before that let see how the rhythm creator is organized: (1) Rhythm Settings : set name and tempo of rhythm (2) Timeline : displays player options, rhythm timeline and note creation options (3) Note configuration : When a note is selected you can whether set a note or rest, set the beat value and the AudioReference . Initially the options in the Timeline and Note Settings are unavailable because the rhythm is empty. With this overview let's continue in our composition. Click on in \"quarter note and plus sign\" icon in the Timeline to append a new note to the rhythm. You will see a new note in the time-line. The general description of the elements of the Timeline : Playback options : (1) Go to start of timeline (2) Go previous note (3) Play/Stop rhythm playback (4) Go to next note (5) Go to end of timeline (6) Enable/Disable loop (7) Mute/Unmute rhythm playback (8) Enable/disable metronome playback (9) Current playback position. Format: Minutes:Seconds:Milliseconds . (10) Rhythm total duration Timeline (11) Zoom slider (12) Playhead area (13) Current playhead position (14) Representation of a note on the timeline Note edition options (15) Add new note (16) Duplicate selected note (17) Remove selected note (18) Move selected note to left (19) Move selected note to right (20) Current selected no index / total of notes When you select a note, you can configure the Note Settings . (1) If the selected element is note or rest. When the element is a rest it means an interval of silence in rhythm (no sound). (2) Defines the beat value of the selected element - duration of the element (3) AudioClip search bar by name (4) AudioReference item (5) Preview AudioClip"
  },
  "articles/rhythmos-editor-getting-started.html": {
    "href": "articles/rhythmos-editor-getting-started.html",
    "title": "Rhythmos Editor - Getting Started | Rhythmos Engine Documentation Website",
    "keywords": "Rhythmos Editor - Getting Started The Rhythmos Editor is an extension to facilitate creation of rhythms. To open it go to the Tools > Rhythmos Editor at the top bar of the Unity. When you open for the first time, the following screen is showed: You will see a message saying: \"Rhythmos Editor is disabled due to not having RhythmosDatabase loaded. Please access Settings tab and create or load RhythmosDatabase to enable this options.\" That's means that RhythmosEditor don't have loaded any RhythmosDatabase file. Go to Settings tab In the Settings tab, under Database section, you'll see a status message and two buttons enabled. New : create a new XML Rhythmos database file. Clicking in this option will open a new window to select where you want to store the RhythmosDatabase. Make sure to create inside Assets folder of your project. Import : imports a Rhythmos database XML file. Click in this option you have already created one Rhythmos database XML file. Other available options: If you have loaded a database you can make a copy using the option Export . The Metronome AudioClip is a optional sound effect play every beat. This can be used you to assist during rhythm creation. Done! You are ready to create your own rhythms!"
  },
  "articles/rhythmos-editor-importing-audio-clips.html": {
    "href": "articles/rhythmos-editor-importing-audio-clips.html",
    "title": "Rhythmos Editor - Importing AudioClips | Rhythmos Engine Documentation Website",
    "keywords": "Rhythmos Editor - Importing AudioClips In order to actually have sounds in our rhythms, we need to import audio clips into RhythmosDatabase. Go to AudioClips tab You have two ways to add AudioReference : Click in the bottom button with plus sign + and manually select the desired sound effect in AudioClip field Or by drag and drop AudioClips to Rhythmos Editor window: Select your files in Project explorer Drag to RhythmosEditor window Drop the files inside the scroll view area After create and import, it will be added the new AudioReference item to the list. Each number The AudioReference index Custom color. Colors serve to distinguish notes when you are editing rhythms. AudioClip field. If this field is not set and a Rhythm is using will simple not be played. Tip: select short sounds only. Remove this AudioReference . Be careful. Removing one item in the list can damage the rhythms"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome | Rhythmos Engine Documentation Website",
    "keywords": "Welcome Rhythmos Engine is an extension for Unity 3D to create rhythms for musical games or apps, based on musical notation. From greek rhythmos means \"any regular recurring motion, symmetry\". Articles To get start please access the following links: Brief Introduction to Rhythms Downloads and Installation guide Rhythmos Editor - Getting Started API Documentation Support If you have question, suggestions or issues please contact the e-mail tobiasbulrich@gmail.com or access the project GitHub repository . Note This documentation is dedicated to the v1.3 and above versions. If you are using an old version please refer to the old documentation page ."
  }
}